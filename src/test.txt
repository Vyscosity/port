#pragma once

#include <bx/uint32_t.h>
#include <common.h>
#include <bgfx_utils.h>
#include <stdio.h>

#include <SDL.h>
#include <iostream>

#include <bgfx/embedded_shader.h>
#include <vs_cubes.sc.glsl.bin.h>
#include <vs_cubes.sc.essl.bin.h>
#include <vs_cubes.sc.spv.bin.h>
#include <fs_cubes.sc.glsl.bin.h>
#include <fs_cubes.sc.essl.bin.h>
#include <fs_cubes.sc.spv.bin.h>
#if defined(_WIN32)
//#include <vs_cubes.sc.dx9.bin.h>
#include <vs_cubes.sc.dx11.bin.h>
//#include <fs_cubes.sc.dx9.bin.h>
#include <fs_cubes.sc.dx11.bin.h>
#endif //  defined(_WIN32)
#if __APPLE__
#include <vs_cubes.sc.mtl.bin.h>
#include <fs.sc.mtl.bin.h>
#endif // __APPLE__

static const bgfx::EmbeddedShader shaders_[] =
{
	BGFX_EMBEDDED_SHADER(vs_cubes), BGFX_EMBEDDED_SHADER(fs_cubes)
};

namespace
{
	struct PosColorVertex
	{
		float m_x;
		float m_y;
		float m_z;
		uint32_t m_abgr;

		static void init()
		{
			ms_layout
				.begin()
				.add(bgfx::Attrib::Position, 3, bgfx::AttribType::Float)
				.add(bgfx::Attrib::Color0, 4, bgfx::AttribType::Uint8, true)
				.end();
		};

		static bgfx::VertexLayout ms_layout;
	};

	bgfx::VertexLayout PosColorVertex::ms_layout;

	static PosColorVertex s_cubeVertices[] =
	{
		{-1.0f,  1.0f,  1.0f, 0xff000000 },
		{ 1.0f,  1.0f,  1.0f, 0xff0000ff },
		{-1.0f, -1.0f,  1.0f, 0xff00ff00 },
		{ 1.0f, -1.0f,  1.0f, 0xff00ffff },
		{-1.0f,  1.0f, -1.0f, 0xffff0000 },
		{ 1.0f,  1.0f, -1.0f, 0xffff00ff },
		{-1.0f, -1.0f, -1.0f, 0xffffff00 },
		{ 1.0f, -1.0f, -1.0f, 0xffffffff },
	};

	static const uint16_t s_cubeTriList[] =
	{
		0, 1, 2, // 0
		1, 3, 2,
		4, 6, 5, // 2
		5, 6, 7,
		0, 2, 4, // 4
		4, 2, 6,
		1, 5, 3, // 6
		5, 7, 3,
		0, 4, 1, // 8
		4, 5, 1,
		2, 3, 6, // 10
		6, 3, 7,
	};

	class Context : public entry::AppI
	{
	public:

		Context(const char* _name, const char* _description, const char* _url)
			: entry::AppI(_name, _description, _url)
		{
		}

		void init(int32_t _argc, const char* const* _argv, uint32_t _width, uint32_t _height) override
		{
			Args args(_argc, _argv);

			m_width = _width;
			m_height = _height;
			m_debug = BGFX_DEBUG_NONE;
			m_reset = BGFX_RESET_VSYNC;

			entry::setWindowSize(entry::kDefaultWindowHandle, m_width, m_height); // noice

			bgfx::Init init;
			init.type = args.m_type;
			init.vendorId = args.m_pciId;
			init.platformData.nwh = entry::getNativeWindowHandle(entry::kDefaultWindowHandle);
			init.platformData.ndt = entry::getNativeDisplayHandle();
			init.platformData.type = entry::getNativeWindowHandleType();
			init.resolution.width = m_width;
			init.resolution.height = m_height;
			init.resolution.reset = m_reset;
			bgfx::init(init);

			bgfx::setViewClear(0, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, 0x303040ff, 1.0f, 0);

			PosColorVertex::init();

			m_vbh = bgfx::createVertexBuffer(bgfx::makeRef(s_cubeVertices, sizeof(s_cubeVertices)), PosColorVertex::ms_layout);
			m_ibh = bgfx::createIndexBuffer(bgfx::makeRef(s_cubeTriList, sizeof(s_cubeTriList)));

			bgfx::RendererType::Enum type = bgfx::getRendererType();
			m_program = bgfx::createProgram(bgfx::createEmbeddedShader(shaders_, type, "vs_cubes"), bgfx::createEmbeddedShader(shaders_, type, "fs_cubes"), true);

			m_timeOffset = bx::getHPCounter();
		}

		virtual int shutdown() override
		{

			/*
			// Cleanup.
			for (uint32_t ii = 0; ii < BX_COUNTOF(m_ibh); ++ii)
			{
				bgfx::destroy(m_ibh[ii]);
			}

			bgfx::destroy(m_vbh);
			bgfx::destroy(m_program);
			*/

			// Shutdown bgfx.
			bgfx::shutdown();

			return 0;
		}

		bool update() override
		{
			if (!entry::processEvents(m_width, m_height, m_debug, m_reset, &m_mouseState))
			{
				bgfx::setViewRect(0, 0, 0, uint16_t(m_width), uint16_t(m_height));

				bgfx::touch(0);
				float time = (float)((bx::getHPCounter() - m_timeOffset) / double(bx::getHPFrequency()));
				const bx::Vec3 at = { 0.0f, 0.0f,   0.0f };
				const bx::Vec3 eye = { 0.0f, 0.0f, -5.0f };
				{
					float view[16];
					bx::mtxLookAt(view, eye, at);
					float proj[16];
					bx::mtxProj(proj, 60.0f, float(m_width) / float(m_height), 0.1f, 100.0f, bgfx::getCaps()->homogeneousDepth);
					bgfx::setViewTransform(0, view, proj);
					bgfx::setViewRect(0, 0, 0, uint16_t(m_width), uint16_t(m_height));
				}
				bgfx::touch(0);

				bgfx::IndexBufferHandle ibh = m_ibh;

				float mtx[3];
				bx::mtxRotateXY(mtx, time, time);

				bgfx::setTransform(mtx);
				bgfx::setVertexBuffer(0, m_vbh);
				bgfx::setIndexBuffer(ibh);
				bgfx::submit(0, m_program);

				bgfx::frame();

				return true;
			}
			return false;
		}

		entry::MouseState m_mouseState;

		uint32_t m_width;
		uint32_t m_height;
		uint32_t m_debug;
		uint32_t m_reset;

		bgfx::VertexBufferHandle m_vbh;
		bgfx::IndexBufferHandle m_ibh;

		bgfx::ProgramHandle m_program;
		int64_t m_timeOffset;


	};

} // namespace

ENTRY_IMPLEMENT_MAIN(
	Context
	, "00-helloworld"
	, "Initialization and debug text."
	, "https://bkaradzic.github.io/bgfx/examples.html#helloworld"
);